---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Nobey's Screen recording test play ground">
  <main>
    <h1>
      Welcome to <span class="text-gradient"
        >Nobey's Screen recording test play ground</span
      >
    </h1>
    <div class="flex flex-col md:flex-row md:space-x-4 max-md:space-y-4 mb-4">
      <div class="w-full md:w-8/12">
        <label
          for="client-id"
          class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >Your ID</label
        >
        <input
          id="client-id"
          type="text"
          class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="nobeys-testing-peer-1"
          required
          autocomplete="off"
        />
      </div>
      <div class="w-full md:w-8/12">
        <label
          for="peer-id"
          class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >Peer ID</label
        >
        <input
          id="peer-id"
          type="text"
          class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="nobeys-testing-peer-2"
          required
          autocomplete="off"
        />
      </div>
      <button
        id="call"
        class="block max-md:w-full mb-4 py-1 px-8 m-auto border rounded-lg dark:bg-green-600 dark:border-green-500 dark:text-white"
        >Call</button
      >
      <button
        id="answer"
        class="block max-md:w-full mb-4 py-1 px-8 m-auto border rounded-lg dark:bg-green-600 dark:border-green-500 dark:text-white"
        >Answer</button
      >
    </div>
    <video id="video"></video>
  </main>
  <script>
    import { Peer } from 'peerjs';

    const debounce = (callback: Function, wait: number) => {
      let timeoutId: number | undefined = undefined;
      return (...args: unknown[]) => {
        window.clearTimeout(timeoutId);
        timeoutId = window.setTimeout(() => {
          callback(...args);
        }, wait);
      };
    };

    async function startCall() {
      try {
        const captureStream = await navigator.mediaDevices.getDisplayMedia({
          video: {
            displaySurface: 'browser',
          },
          // audio: {
          //   suppressLocalAudioPlayback: false,
          // },
          // preferCurrentTab: false,
          // selfBrowserSurface: 'exclude',
          // systemAudio: 'include',
          // surfaceSwitching: 'include',
          // monitorTypeSurfaces: 'include',
        });
        (document.getElementById('video') as HTMLMediaElement).srcObject =
          captureStream;

        (document.getElementById('video') as HTMLMediaElement).play();

        const peer = new Peer(
          (document.getElementById('client-id') as HTMLInputElement)!.value
        );
        peer.call(
          (document.getElementById('peer-id') as HTMLInputElement)!.value,
          captureStream
        );

        console.log('called');

        return captureStream;
      } catch (err) {
        console.error(`Error: ${err}`);
      }
    }

    async function answerCall() {
      const peer = new Peer(
        (document.getElementById('client-id') as HTMLInputElement)!.value
      );
      console.log(peer);
      peer.on('call', (call) => {
        console.log(call);
        call.on('stream', function (remoteStream: MediaProvider | null) {
          (document.getElementById('video') as HTMLMediaElement).srcObject =
            remoteStream;

          (document.getElementById('video') as HTMLMediaElement).play();
        });
      });
    }

    const startCallWithDebounce = debounce(startCall, 600);

    const callButton = document.getElementById('call');
    callButton?.addEventListener('click', startCallWithDebounce);

    const answerCallWithDebounce = debounce(answerCall, 600);

    const answerButton = document.getElementById('answer');
    answerButton?.addEventListener('click', answerCallWithDebounce);
  </script>

  <style>
    main {
      margin: auto;
      padding: 1rem;
      width: 800px;
      max-width: calc(100% - 2rem);
      color: white;
      font-size: 20px;
      line-height: 1.6;
    }
    .astro-a {
      position: absolute;
      top: -32px;
      left: 50%;
      transform: translatex(-50%);
      width: 220px;
      height: auto;
      z-index: -1;
    }
    h1 {
      font-size: 4rem;
      font-weight: 700;
      line-height: 1;
      text-align: center;
      margin-bottom: 1em;
    }
    .text-gradient {
      background-image: var(--accent-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-size: 400%;
      background-position: 0%;
    }
    .instructions {
      margin-bottom: 2rem;
      border: 1px solid rgba(var(--accent-light), 25%);
      background: linear-gradient(
        rgba(var(--accent-dark), 66%),
        rgba(var(--accent-dark), 33%)
      );
      padding: 1.5rem;
      border-radius: 8px;
    }
    .instructions code {
      font-size: 0.8em;
      font-weight: bold;
      background: rgba(var(--accent-light), 12%);
      color: rgb(var(--accent-light));
      border-radius: 4px;
      padding: 0.3em 0.4em;
    }
    .instructions strong {
      color: rgb(var(--accent-light));
    }
    .link-card-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
      gap: 2rem;
      padding: 0;
    }
    img:hover {
      cursor: pointer;
    }
  </style>
</Layout>
